import { CompletionItem, CompletionItemKind, SnippetString } from "vscode";
import { AST } from "../ast";
import { getConfigValue } from "./config";
import constants from "../constants";
import { isNodeClass } from "./find";

/** Returns true if given node is an attribute object */
export const nodeIsAttribute = (branch: AST.Node[]): boolean => {
    const node = <AST.ObjectExpression>branch.at(-1);
    if (!node) return false;
    if (node.type !== "ObjectExpression") return false;
    return node.attributes;
}

export const getAttributeCompletions = (branch: AST.Node[]): CompletionItem[] => {
    if (!nodeIsAttribute(branch)) return [];

    if (isNodeClass(branch.at(-2))) {
        return getClassAttributeCompletions();
    }

    if (branch.at(-3)?.type === "ClassBody") {
        const body = (<AST.ClassBody>branch.at(-3)).body;
        const prop = <AST.PropertyDefinition>branch.at(-2);
        const index = body.indexOf(prop) + 1;
        return getMethodAttributeCompletions(index);
    }

    return [];
}

export const getClassAttributeCompletions = (): CompletionItem[] => {
    const item = new CompletionItem("</ Autogenerated attribute />", CompletionItemKind.Snippet);
    const s = getConfigValue(constants.CODE_FORMATTING_ATTR_SPACING) ? " " : "";
    const eq = `${s}=${s}`;
    item.insertText = new SnippetString(` help${eq}"\${1:Description placeholder}" `);
    return [item];
}

export const getMethodAttributeCompletions = (index: number = 0): CompletionItem[] => {
    const item = new CompletionItem("</ Autogenerated attribute />", CompletionItemKind.Snippet);
    const snippet = new SnippetString();
    const s = getConfigValue(constants.CODE_FORMATTING_ATTR_SPACING) ? " " : "";
    const eq = `${s}=${s}`;

    snippet.appendText(` label${eq}"`);
    snippet.appendPlaceholder(`Label`)
    snippet.appendText(`", `);

    snippet.appendText(`help${eq}"`);
    snippet.appendPlaceholder(`Description`)
    snippet.appendText(`", `);

    snippet.appendChoice([
        `options${eq}"Yes,No",`,
        `is_input${eq}true,`,
        `is_function${eq}true,`,
        `/* string */`, // needs to be something - a comment is better than space?
    ]);
    snippet.appendText(` `);

    // // Disable `per_display` property since it's rarely used
    // snippet.appendChoice([
    //     `/* global */`,
    //     `per_display${eq}true,`
    // ]);
    // snippet.appendText(` `);

    snippet.appendText(`order${eq}`);
    snippet.appendPlaceholder(`${index}`)
    snippet.appendText(` `);

    item.insertText = snippet;
    return [item];
}
