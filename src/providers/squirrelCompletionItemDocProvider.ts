import {
    CancellationToken,
    CompletionContext,
    CompletionItem,
    CompletionItemProvider,
    Position,
    Range,
    ProviderResult,
    TextDocument,
    CompletionTriggerKind,
} from "vscode";
import { adjustDocPos, docPosToPos } from "../utils/location";
import { getDocCompletionsAtPos } from "../doc/completion";
import { AST } from "../ast";
import constants from "../constants";
import { requestProgram } from "../utils/program";
import { getCommentAtPosition } from "../doc/find";

/** DocBlock "Autogenerated Doc" completion */
export class SquirrelCompletionItemDocProvider
    implements CompletionItemProvider
{
    public enabled: boolean = true;

    provideCompletionItems(
        document: TextDocument,
        position: Position,
        token: CancellationToken,
        context: CompletionContext,
    ): ProviderResult<CompletionItem[]> {
        if (!this.enabled) return;
        if (context.triggerKind === CompletionTriggerKind.TriggerCharacter && !context.triggerCharacter) return;

        // Require full /** prefix sequence to be entered
        const pLen = constants.DOCBLOCK_PREFIX.length;
        const lastPos = adjustDocPos(position, -pLen);
        const prefix = document.getText(new Range(lastPos, position));
        if (prefix !== constants.DOCBLOCK_PREFIX) return;

        return requestProgram(
            document,
            token,
            (program: AST.Program) => {
                // Pos must be immediately after /** prefix
                const pos = docPosToPos(document, position);
                const comment = getCommentAtPosition(program, pos);
                if (!comment) return;
                if (comment.type !== "CommentBlock") return;
                if (pos.index !== comment.loc.start.index + pLen) return;

                return getDocCompletionsAtPos(program, pos);
            },
        );
    }
}
