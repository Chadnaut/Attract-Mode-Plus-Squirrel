{
    "name": "am-log",
    "scopeName": "source.log",
    "patterns": [
		{
			"include": "#errors"
		},
		{
			"include": "#statements"
		},
		{
			"include": "#bullets"
		},
		{
			"include": "#warnings"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#keywords"
		}
	],
	"repository": {
        "literals": {
            "patterns": [
                {
                    "match": "\\b\\d{4}-\\d{2}-\\d{2}(T|\\b)",
                    "name": "comment.date.log"
                },
                {
                    "match": "(?<=(^|\\s))\\d{2}[^\\w\\s]\\d{2}[^\\w\\s]\\d{4}\\b",
                    "name": "comment.date.log"
                },
                {
                    "match": "\\d{1,2}:\\d{2}(:\\d{2}([.,]\\d{1,})?)?(Z| ?[+-]\\d{1,2}:\\d{2})?\\b",
                    "name": "comment.time.log"
                },
                {
                    "match": "\\b(\\d{2,})x(\\d{2,})\\b",
                    "captures": {
                        "1": {
                            "name": "constant.language.resolution.width.log"
                        },
                        "2": {
                            "name": "constant.language.resolution.height.log"
                        }
                    }
                },
                {
                    "match": "\\b([0-9a-fA-F]{40}|[0-9a-fA-F]{10}|[0-9a-fA-F]{7})\\b",
                    "name": "constant.language.hex1.log"
                },
                {
                    "match": "\\b[0-9a-fA-F]{8}[-]?([0-9a-fA-F]{4}[-]?){3}[0-9a-fA-F]{12}\\b",
                    "name": "constant.language.uid.log"
                },
                {
                    "match": "\\b([0-9a-fA-F]{2,}[:-])+[0-9a-fA-F]{2,}+\\b",
                    "name": "constant.language.hex2.log"
                },
                {
                    "match": "\\bv?[0-9]+\\b",
                    "name": "constant.language.version.log"
                },
                {
                    "match": "\\b(true|false)\\b",
                    "name": "constant.language.boolean.log"
                },
                {
                    "match": "\\bnull\\b",
                    "name": "constant.language.null.log"
                },
                {
                    "match": "\\b(0x[a-fA-F0-9]+)\\b",
                    "name": "constant.language.hex.log"
                },
                {
                    "match": "(?<![\\w/\\\\])([\\w-]+\\.)+([\\w-])+(?![\\w/\\\\])",
                    "name": "constant.language.member.log"
                },
                {
                    "match": "(?<![\\w])'[^']*'",
                    "name": "string.log"
                },
                {
                    "match": "\\b(INSTANCE|ARRAY|TABLE|CLOSURE|CLASS|FUNCTION|GENERATOR)\\b",
                    "name": "storage.type.log"
                },
                {
                    "include": "#qstring-local"
                },
                {
                    "include": "#qstring-verbatim"
                },
                {
                    "include": "#qstring-double"
                }
            ]
        },
        "qstring-local": {
			"name": "string.quoted.double.nut",
			"begin": "(?<=\\[[^]]+\\] )\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.nut"
				}
			},
			"end": "(\")\n|(\n)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.nut"
				},
				"2": {
					"name": "invalid.illegal.newline.nut"
				}
			}
		},
		"qstring-verbatim": {
			"name": "string.quoted.verbatim.nut",
			"begin": "@\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.nut"
				}
			},
            "end": "(\")(?=[^\"])",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.nut"
				}
			},
			"patterns": [
				{
					"include": "#string-verbatim-escape"
				}
			]
		},
        "qstring-double": {
			"name": "string.quoted.double.nut",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.nut"
				}
			},
			"end": "(\")|((?:[^\\\\\\n]|\n)$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.nut"
				},
				"2": {
					"name": "invalid.illegal.newline.nut"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"string-character-escape": {
			"name": "constant.character.escape.nut",
			"match": "\\\\(x[0-9A-Fa-f]{1,4}|t|a|b|n|r|v|f|\\\\|\\'|\\\"|0)"
		},
		"string-verbatim-escape": {
			"name": "constant.character.escape.nut",
			"match": "\\\"\\\""
		},
        "warnings": {
            "patterns": [
                {
                    "match": "\\b(DEBUG|Debug)\\b|(?i)\\b(debug)\\:",
                    "name": "markup.changed"
                },
                {
                    "match": "(?i)\\[(debug)\\]",
                    "name": "markup.changed"
                },
                {
                    "match": "\\b(HINT|INFO|INFORMATION|Info|NOTICE)\\b|(?i)\\b(info|information)\\:",
                    "name": "markup.inserted"
                },
                {
                    "match": "(?i)\\[(information|info)\\]",
                    "name": "markup.inserted"
                },
                {
                    "match": "\\b(WARNING|WARN|Warn)\\b|(?i)\\b(warning)\\:",
                    "name": "markup.deleted"
                },
                {
                    "match": "(?i)\\[(warning|warn)\\]",
                    "name": "markup.deleted"
                },
                {
                    "match": "\\b(ALERT|CRITICAL|EMERGENCY|ERROR|FAILURE|FAIL|Fatal|FATAL|Error)\\b|(?i)\\b(error)\\:",
                    "name": "string.regexp strong"
                },
                {
                    "match": "(?i)\\[(error|fatal)\\]",
                    "name": "string.regexp strong"
                }
            ]
        },
        "statements": {
            "patterns": [
                {
                    "match": "^(Attract-Mode)( Plus)?",
                    "name": "entity.name.type.class.log"
                },
                {
                    "match": "(?<=^ \\W |^)([^ \\[][\\- _'*a-zA-Z\\/\\(\\)]+(?=(:| -)[ \r\n]))",
                    "name": "storage.type.log"
                }
            ]
        },
        "errors": {
            "patterns": [
                {
                    "match": "^(CALLSTACK|LOCALS)\\n",
                    "name": "comment.log"
                },
                {
                    "match": "Unexpectedly lost focus to: .*?\\n",
                    "name": "comment.log"
                },
                {
                    "match": "^Restarted looped video",
                    "name": "comment.log"
                },
                {
                    "match": "DEBUG_MAX_LINES exceeded.*?\n",
                    "name": "comment.log"
                },
                {
                    "match": "Valid settings are: [^$]*",
                    "name": "comment.log"
                },
                {
                    "match": "(AN ERROR HAS OCCUR*ED|Unrecog?nized|[Ff]ailure|[Ff]ailed|Unable|Layout is empty|Shaders are not available|Script file not found|Warning|(Script |[Hh]ttp )?[Ee]rror|ERROR)",
                    "name": "markup.deleted.log"
                }
            ]
        },
        "bullets": {
            "patterns": [
                {
                    "match": "^ \\W ",
                    "name": "comment.log"
                },
                {
                    "match": "^-*?\n",
                    "name": "comment.log"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "match": "(?<=\\[)Transition(?=\\])",
                    "name": "entity.name.type.enum.log"
                },
                {
                    "match": "\\=>?",
                    "name": "keyword"
                },
                {
                    "match": "SIG[A-Z]+",
                    "name": "constant.language.log"
                },
                {
                    "match": "NVAPI_OK",
                    "name": "markup.inserted.log"
                },
                {
                    "match": "NVAPI_[_A-Z]+",
                    "name": "markup.deleted.log"
                }
            ]
        }
    }
}
