import { describe, expect, it } from "@jest/globals";
import { parseExtra as parse, pos } from "../utils";
import { getDocCompletions } from "../../src/doc/completion";
import { getBranchAtPos } from "../../src/utils/find";
import constants from "../../src/constants";

jest.replaceProperty(constants, "FE_MODULES_PATH", "mock");

describe("Doc Completion", () => {
    it("getDocCompletions, undefined", () => {
        expect(getDocCompletions([]).length).toBe(0);
    });

    it("getDocCompletions, label", () => {
        const program = parse("123");
        const n = getBranchAtPos(program, pos(2));
        const completions = getDocCompletions(n);
        expect(completions[0].label).toBe("/** Autogenerated Doc */");
    });

    it("getDocCompletions, literal", () => {
        const program = parse("123");
        const n = getBranchAtPos(program, pos(2));
        const completions = getDocCompletions(n);
        const value = completions[0].insertText["value"];
        expect(value).toBe(" ${1:Description placeholder}");
    });

    it("getDocCompletions, function", () => {
        const program = parse("function foo(a, b = 3) {}");
        const n = getBranchAtPos(program, pos(11));
        const completions = getDocCompletions(n);
        const value = completions[0].insertText["value"];
        expect(value).toBe(
            "\n * ${1:Description placeholder}\n * @param {*\\} a\n * @param {integer\\} b\n",
        );
    });

    it("getDocCompletions, rest", () => {
        const program = parse("function foo(...) {}");
        const n = getBranchAtPos(program, pos(11));
        const completions = getDocCompletions(n);
        const value = completions[0].insertText["value"];
        expect(value).toBe(
            "\n * ${1:Description placeholder}\n * @param {*\\} ...vargv\n",
        );
    });

    it("getDocCompletions, method", () => {
        const program = parse("class foo { function bar() { return 123; } }");
        const n = getBranchAtPos(program, pos(22));
        const completions = getDocCompletions(n);
        const value = completions[0].insertText["value"];
        expect(value).toBe(
            "\n * ${1:Description placeholder}\n * @returns {integer\\}\n",
        );
    });

    it("getDocCompletions, protected", () => {
        const program = parse("class foo { function _bar() {} }");
        const n = getBranchAtPos(program, pos(22));
        const completions = getDocCompletions(n);
        const value = completions[0].insertText["value"];
        expect(value).toBe(
            "\n * ${1:Description placeholder}\n * @protected\n",
        );
    });

    it("getDocCompletions, private", () => {
        const program = parse("class foo { function __bar() {} }");
        const n = getBranchAtPos(program, pos(22));
        const completions = getDocCompletions(n);
        const value = completions[0].insertText["value"];
        expect(value).toBe("\n * ${1:Description placeholder}\n * @private\n");
    });

    it("getDocCompletions, class def", () => {
        const program = parse("class foo {}");
        const n = getBranchAtPos(program, pos(7));
        const completions = getDocCompletions(n);
        const value = completions[0].insertText["value"];
        // expect(value).toBe("\n * ${1:Description placeholder}\n * @class\n");
        expect(value).toBe(" ${1:Description placeholder}");
    });

    it("getDocCompletions, class exp", () => {
        const program = parse("local foo = class {}");
        const n = getBranchAtPos(program, pos(7));
        const completions = getDocCompletions(n);
        const value = completions[0].insertText["value"];
        // expect(value).toBe("\n * ${1:Description placeholder}\n * @class\n");
        expect(value).toBe(" ${1:Description placeholder}");
    });

    it("getDocCompletions, class constructor", () => {
        const program = parse("class foo { constructor() {} }");
        const n = getBranchAtPos(program, pos(17));
        const completions = getDocCompletions(n);
        const value = completions[0].insertText["value"];
        expect(value).toBe(
            "\n * ${1:Creates an instance of foo.}\n * @constructor\n",
        );
    });

    it("getDocCompletions, class nameless constructor", () => {
        const program = parse(
            "function foo() { return class { constructor() {} } }",
        );
        const n = getBranchAtPos(program, pos(37));
        const completions = getDocCompletions(n);
        const value = completions[0].insertText["value"];
        expect(value).toBe(
            "\n * ${1:Creates an instance of class.}\n * @constructor\n",
        );
    });

    it("getDocCompletions, generator", () => {
        const program = parse("function foo() { yield 123; }");
        const n = getBranchAtPos(program, pos(11));
        const completions = getDocCompletions(n);
        const value = completions[0].insertText["value"];
        // expect(value).toBe("\n * ${1:Description placeholder}\n * @generator\n");
        expect(value).toBe(" ${1:Description placeholder}");
    });

    it("getDocCompletions, global", () => {
        const program = parse("::root <- 123");
        const n = getBranchAtPos(program, pos(11)).slice(0, -1);
        const completions = getDocCompletions(n);
        const value = completions[0].insertText["value"];
        expect(value).toBe("\n * ${1:Description placeholder}\n * @global\n");
    });

    it("getDocCompletions, enum", () => {
        const program = parse("enum myen { a, b, c }");
        const n = getBranchAtPos(program, pos(7)).slice(0, -1);
        const completions = getDocCompletions(n);
        const value = completions[0].insertText["value"];
        expect(value).toBe(
            "\n * ${1:Description placeholder}\n * @enum {integer\\}\n",
        );
    });

    it("getDocCompletions, enum type", () => {
        const program = parse('enum myen { a = "string" }');
        const n = getBranchAtPos(program, pos(7)).slice(0, -1);
        const completions = getDocCompletions(n);
        const value = completions[0].insertText["value"];
        expect(value).toBe(
            "\n * ${1:Description placeholder}\n * @enum {string\\}\n",
        );
    });

    it("getDocCompletions, enum type multiple", () => {
        const program = parse('enum myen { a = "string", b = 123 }');
        const n = getBranchAtPos(program, pos(7)).slice(0, -1);
        const completions = getDocCompletions(n);
        const value = completions[0].insertText["value"];
        expect(value).toBe(
            "\n * ${1:Description placeholder}\n * @enum {*\\}\n",
        );
    });
});
